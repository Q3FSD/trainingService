package com.mentorondemand.trainingservice.controllers;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mentorondemand.trainingservice.entities.Trainings;
import com.mentorondemand.trainingservice.services.TrainingRepository;

@RestController
@CrossOrigin(origins = "http://111.231.63.123:4200")
@RequestMapping(path = "/v1/training")
public class TrainingController {
	@Autowired // This means to get the bean called trainingRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private TrainingRepository trainingRepository;

	@PostMapping(path = "/add")
	public @ResponseBody Trainings addTraining(@Valid @RequestBody Trainings training) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		return trainingRepository.save(training);
	}

	@DeleteMapping(path = "/remove/{id}")
	public @ResponseBody String removeTraining(@PathVariable(value = "id") Long id) {
		trainingRepository.deleteById(id);
		return "Removed";
	}

	@GetMapping(path = "/search")
	public @ResponseBody Iterable<Trainings> searchTrainings(@RequestParam String keyword) {
		return trainingRepository.findByNameLike("%" + keyword + "%");
	}

	@PostMapping(path = "/mentor")
	public @ResponseBody String mentorBook(@RequestParam String mentorName, @RequestParam String ids) {
		for (String id : ids.split(",")) {
			trainingRepository.mentorBook(mentorName, Long.valueOf(id));
		}
		return "Booked";
	}

	@PostMapping(path = "/student")
	public @ResponseBody String studentBook(@RequestParam String studentName, @RequestParam String ids) {
		for (String id : ids.split(",")) {
			trainingRepository.studentBook(studentName, Long.valueOf(id));
		}
		return "Booked";
	}
}
